// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/mattn/anko/ast"
)

//line parser.go.y:45
type yySymType struct {
	yys int
	tok ast.Token

	compstmt            ast.Stmt
	stmts               ast.Stmt
	stmt                ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_for            ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default ast.Stmt

	exprs                []ast.Expr
	expr                 ast.Expr
	expr_idents          []string
	type_data            *ast.TypeStruct
	type_data_struct     *ast.TypeStruct
	slice_count          int
	expr_member_or_ident ast.Expr
	expr_member          *ast.MemberExpr
	expr_ident           *ast.IdentExpr
	expr_literals        ast.Expr
	expr_map             *ast.MapExpr
	expr_slice           ast.Expr
	expr_chan            ast.Expr
	expr_unary           ast.Expr
	expr_binary          ast.Expr
	expr_lets            ast.Expr

	op_binary     ast.Operator
	op_comparison ast.Operator
	op_add        ast.Operator
	op_multiply   ast.Operator
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const SHIFTLEFT = 57384
const SHIFTRIGHT = 57385
const SWITCH = 57386
const CASE = 57387
const DEFAULT = 57388
const GO = 57389
const CHAN = 57390
const STRUCT = 57391
const MAKE = 57392
const OPCHAN = 57393
const EQOPCHAN = 57394
const TYPE = 57395
const LEN = 57396
const DELETE = 57397
const CLOSE = 57398
const MAP = 57399
const IMPORT = 57400
const UNARY = 57401

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"GO",
	"CHAN",
	"STRUCT",
	"MAKE",
	"OPCHAN",
	"EQOPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"MAP",
	"IMPORT",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"','",
	"';'",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1077

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	52, 57,
	59, 57,
	77, 57,
	78, 5,
	-2, 1,
	-1, 23,
	77, 58,
	-2, 26,
	-1, 27,
	16, 93,
	-2, 57,
	-1, 66,
	52, 57,
	59, 57,
	77, 57,
	-2, 5,
	-1, 119,
	16, 94,
	77, 94,
	-2, 110,
	-1, 123,
	4, 105,
	48, 105,
	49, 105,
	57, 105,
	-2, 69,
	-1, 262,
	74, 179,
	80, 179,
	-2, 171,
	-1, 281,
	74, 179,
	-2, 171,
	-1, 285,
	1, 60,
	8, 60,
	45, 60,
	46, 60,
	52, 60,
	59, 60,
	60, 60,
	74, 60,
	76, 60,
	77, 60,
	78, 60,
	80, 60,
	83, 60,
	-2, 108,
	-1, 289,
	1, 17,
	45, 17,
	46, 17,
	74, 17,
	78, 17,
	83, 17,
	-2, 74,
	-1, 291,
	1, 19,
	45, 19,
	46, 19,
	74, 19,
	78, 19,
	83, 19,
	-2, 76,
	-1, 321,
	74, 177,
	80, 177,
	-2, 172,
	-1, 339,
	1, 16,
	45, 16,
	46, 16,
	74, 16,
	78, 16,
	83, 16,
	-2, 73,
	-1, 340,
	1, 18,
	45, 18,
	46, 18,
	74, 18,
	78, 18,
	83, 18,
	-2, 75,
}

const yyPrivate = 57344

const yyLast = 3873

var yyAct = [...]int{
	70, 263, 313, 23, 126, 314, 115, 36, 316, 315,
	8, 5, 211, 368, 6, 71, 8, 141, 75, 8,
	67, 324, 211, 123, 262, 281, 8, 113, 116, 120,
	8, 8, 277, 278, 83, 134, 33, 211, 84, 136,
	86, 322, 217, 133, 276, 210, 8, 125, 1, 211,
	124, 148, 320, 211, 142, 290, 125, 149, 150, 151,
	152, 153, 214, 288, 145, 204, 229, 23, 146, 333,
	129, 144, 7, 364, 199, 340, 339, 159, 160, 68,
	163, 164, 165, 166, 200, 168, 170, 327, 172, 146,
	269, 173, 174, 175, 176, 177, 178, 179, 180, 181,
	182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
	192, 193, 194, 195, 318, 296, 122, 207, 203, 433,
	319, 200, 156, 291, 146, 135, 393, 85, 206, 198,
	85, 289, 146, 212, 213, 200, 215, 220, 222, 223,
	68, 260, 228, 146, 224, 225, 231, 157, 243, 140,
	139, 88, 89, 138, 88, 89, 99, 100, 270, 146,
	208, 125, 240, 197, 232, 129, 129, 137, 129, 77,
	247, 76, 432, 425, 424, 422, 129, 129, 102, 103,
	104, 416, 96, 97, 98, 101, 83, 121, 161, 83,
	84, 415, 86, 84, 411, 86, 410, 409, 68, 407,
	250, 399, 398, 254, 233, 257, 394, 337, 390, 259,
	200, 241, 386, 384, 261, 125, 244, 146, 251, 267,
	125, 383, 273, 258, 264, 125, 382, 379, 265, 280,
	347, 125, 334, 284, 268, 85, 304, 301, 294, 292,
	285, 286, 264, 295, 249, 248, 234, 297, 162, 429,
	252, 129, 428, 397, 208, 48, 308, 310, 377, 88,
	89, 99, 100, 363, 362, 317, 216, 155, 198, 69,
	73, 68, 358, 328, 9, 427, 338, 321, 423, 332,
	232, 316, 315, 336, 287, 10, 78, 96, 97, 98,
	101, 418, 326, 303, 83, 279, 321, 266, 84, 335,
	86, 345, 305, 143, 171, 72, 4, 2, 61, 62,
	66, 65, 354, 118, 63, 357, 64, 359, 356, 46,
	127, 45, 198, 44, 198, 365, 43, 125, 42, 366,
	355, 369, 372, 227, 375, 30, 376, 68, 264, 167,
	125, 154, 342, 367, 127, 380, 49, 29, 325, 312,
	22, 346, 21, 20, 25, 348, 349, 24, 351, 3,
	0, 129, 0, 129, 131, 132, 361, 0, 198, 226,
	0, 0, 401, 130, 0, 403, 0, 0, 0, 0,
	209, 0, 0, 125, 128, 0, 400, 378, 131, 132,
	0, 219, 0, 0, 68, 133, 0, 130, 0, 385,
	230, 387, 388, 0, 0, 0, 421, 391, 128, 0,
	0, 395, 396, 235, 236, 0, 0, 0, 0, 133,
	0, 0, 0, 426, 0, 0, 406, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 412, 0,
	0, 413, 414, 0, 0, 0, 417, 85, 105, 106,
	110, 108, 112, 111, 0, 129, 0, 0, 82, 0,
	0, 0, 0, 90, 91, 93, 94, 95, 92, 0,
	0, 88, 89, 99, 100, 0, 0, 430, 431, 0,
	0, 0, 87, 80, 0, 283, 0, 0, 0, 0,
	79, 0, 81, 107, 109, 102, 103, 104, 0, 96,
	97, 98, 101, 0, 201, 0, 83, 0, 0, 0,
	84, 0, 86, 0, 85, 105, 106, 110, 108, 112,
	111, 323, 0, 0, 0, 82, 0, 0, 0, 0,
	90, 91, 93, 94, 95, 92, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 81,
	107, 109, 102, 103, 104, 0, 96, 97, 98, 101,
	0, 0, 360, 83, 373, 374, 0, 84, 0, 86,
	85, 105, 106, 110, 108, 112, 111, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 90, 91, 93, 94,
	95, 92, 0, 0, 88, 89, 99, 100, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 371, 81, 107, 109, 102, 103,
	104, 0, 96, 97, 98, 101, 0, 0, 0, 83,
	0, 0, 0, 84, 370, 86, 85, 105, 106, 110,
	108, 112, 111, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 90, 91, 93, 94, 95, 92, 0, 0,
	88, 89, 99, 100, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	344, 81, 107, 109, 102, 103, 104, 0, 96, 97,
	98, 101, 0, 0, 0, 83, 0, 0, 0, 84,
	343, 86, 85, 105, 106, 110, 108, 112, 111, 0,
	0, 0, 0, 82, 0, 0, 0, 0, 90, 91,
	93, 94, 95, 92, 0, 0, 88, 89, 99, 100,
	0, 0, 0, 0, 0, 0, 0, 87, 0, 0,
	0, 0, 0, 0, 0, 0, 331, 81, 107, 109,
	102, 103, 104, 0, 96, 97, 98, 101, 0, 0,
	0, 83, 0, 0, 0, 84, 330, 86, 85, 105,
	106, 110, 108, 112, 111, 0, 0, 0, 0, 82,
	0, 0, 0, 0, 90, 91, 93, 94, 95, 92,
	0, 0, 88, 89, 99, 100, 0, 0, 0, 0,
	0, 0, 0, 87, 0, 0, 0, 0, 0, 0,
	0, 0, 300, 81, 107, 109, 102, 103, 104, 0,
	96, 97, 98, 101, 0, 0, 0, 83, 0, 0,
	0, 84, 299, 86, 85, 105, 106, 110, 108, 112,
	111, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	90, 91, 93, 94, 95, 92, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 272, 81,
	107, 109, 102, 103, 104, 0, 96, 97, 98, 101,
	0, 0, 0, 83, 0, 0, 0, 84, 271, 86,
	85, 105, 106, 110, 108, 112, 111, 0, 0, 0,
	0, 82, 0, 0, 0, 0, 90, 91, 93, 94,
	95, 92, 0, 0, 88, 89, 99, 100, 0, 0,
	0, 0, 0, 0, 0, 87, 0, 0, 0, 0,
	0, 0, 0, 0, 246, 81, 107, 109, 102, 103,
	104, 0, 96, 97, 98, 101, 0, 0, 0, 83,
	0, 0, 0, 84, 245, 86, 85, 105, 106, 110,
	108, 112, 111, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 90, 91, 93, 94, 95, 92, 0, 0,
	88, 89, 99, 100, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 81, 107, 109, 102, 103, 104, 0, 96, 97,
	98, 101, 0, 0, 0, 83, 237, 238, 0, 84,
	0, 86, 35, 51, 52, 0, 0, 31, 13, 47,
	14, 26, 0, 27, 0, 0, 0, 0, 0, 0,
	0, 39, 53, 54, 55, 0, 15, 16, 0, 0,
	0, 0, 0, 0, 0, 0, 11, 12, 0, 0,
	0, 0, 28, 0, 0, 17, 0, 0, 40, 56,
	0, 0, 37, 18, 19, 0, 38, 0, 0, 0,
	0, 0, 0, 50, 0, 58, 60, 0, 0, 59,
	0, 41, 0, 34, 0, 0, 0, 32, 0, 0,
	57, 85, 105, 106, 110, 108, 112, 111, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 90, 91, 93,
	94, 95, 92, 0, 0, 88, 89, 99, 100, 0,
	0, 0, 0, 0, 0, 0, 87, 80, 0, 0,
	0, 0, 0, 0, 79, 0, 81, 107, 109, 102,
	103, 104, 0, 96, 97, 98, 101, 0, 0, 0,
	83, 0, 0, 0, 84, 0, 86, 85, 105, 106,
	110, 108, 112, 111, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 90, 91, 93, 94, 95, 92, 0,
	0, 88, 89, 99, 100, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 107, 109, 102, 103, 104, 0, 96,
	97, 98, 101, 0, 0, 0, 83, 420, 0, 0,
	84, 0, 86, 85, 105, 106, 110, 108, 112, 111,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 90,
	91, 93, 94, 95, 92, 0, 0, 88, 89, 99,
	100, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	0, 0, 83, 0, 0, 0, 84, 419, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 107, 109, 102, 103, 104,
	0, 96, 97, 98, 101, 0, 0, 0, 83, 0,
	0, 0, 84, 408, 86, 85, 105, 106, 110, 108,
	112, 111, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 90, 91, 93, 94, 95, 92, 0, 0, 88,
	89, 99, 100, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 405,
	81, 107, 109, 102, 103, 104, 0, 96, 97, 98,
	101, 0, 0, 0, 83, 0, 0, 0, 84, 0,
	86, 85, 105, 106, 110, 108, 112, 111, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 90, 91, 93,
	94, 95, 92, 0, 0, 88, 89, 99, 100, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 107, 109, 102,
	103, 104, 0, 96, 97, 98, 101, 0, 0, 0,
	83, 404, 0, 0, 84, 0, 86, 85, 105, 106,
	110, 108, 112, 111, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 90, 91, 93, 94, 95, 92, 0,
	0, 88, 89, 99, 100, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 107, 109, 102, 103, 104, 0, 96,
	97, 98, 101, 0, 0, 0, 83, 0, 0, 0,
	84, 402, 86, 85, 105, 106, 110, 108, 112, 111,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 90,
	91, 93, 94, 95, 92, 0, 0, 88, 89, 99,
	100, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 392, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	0, 0, 83, 0, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 107, 109, 102, 103, 104,
	0, 96, 97, 98, 101, 0, 389, 0, 83, 0,
	0, 0, 84, 0, 86, 85, 105, 106, 110, 108,
	112, 111, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 90, 91, 93, 94, 95, 92, 0, 0, 88,
	89, 99, 100, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 107, 109, 102, 103, 104, 0, 96, 97, 98,
	101, 0, 0, 0, 83, 0, 0, 0, 84, 381,
	86, 85, 105, 106, 110, 108, 112, 111, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 90, 91, 93,
	94, 95, 92, 0, 0, 88, 89, 99, 100, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 107, 109, 102,
	103, 104, 0, 96, 97, 98, 101, 0, 352, 0,
	83, 0, 0, 0, 84, 0, 86, 85, 105, 106,
	110, 108, 112, 111, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 90, 91, 93, 94, 95, 92, 0,
	0, 88, 89, 99, 100, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 107, 109, 102, 103, 104, 0, 96,
	97, 98, 101, 0, 350, 0, 83, 0, 0, 0,
	84, 0, 86, 85, 105, 106, 110, 108, 112, 111,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 90,
	91, 93, 94, 95, 92, 0, 0, 88, 89, 99,
	100, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	0, 0, 83, 341, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 107, 109, 102, 103, 104,
	0, 96, 97, 98, 101, 0, 0, 0, 83, 0,
	0, 311, 84, 0, 86, 85, 105, 106, 110, 108,
	112, 111, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 90, 91, 93, 94, 95, 92, 0, 0, 88,
	89, 99, 100, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 107, 109, 102, 103, 104, 0, 96, 97, 98,
	101, 0, 306, 0, 83, 0, 0, 0, 84, 0,
	86, 85, 105, 106, 110, 108, 112, 111, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 90, 91, 93,
	94, 95, 92, 0, 0, 88, 89, 99, 100, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 107, 109, 102,
	103, 104, 0, 96, 97, 98, 101, 0, 302, 0,
	83, 0, 0, 0, 84, 0, 86, 85, 105, 106,
	110, 108, 112, 111, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 90, 91, 93, 94, 95, 92, 0,
	0, 88, 89, 99, 100, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 107, 109, 102, 103, 104, 0, 96,
	97, 98, 101, 0, 293, 0, 83, 0, 0, 0,
	84, 0, 86, 85, 105, 106, 110, 108, 112, 111,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 90,
	91, 93, 94, 95, 92, 0, 0, 88, 89, 99,
	100, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 282, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	0, 0, 83, 0, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 107, 109, 102, 103, 104,
	0, 96, 97, 98, 101, 0, 0, 0, 83, 275,
	0, 0, 84, 0, 86, 85, 105, 106, 110, 108,
	112, 111, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 90, 91, 93, 94, 95, 92, 0, 0, 88,
	89, 99, 100, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 107, 109, 102, 103, 104, 0, 96, 97, 98,
	101, 0, 0, 0, 83, 274, 0, 0, 84, 0,
	86, 85, 105, 106, 110, 108, 112, 111, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 90, 91, 93,
	94, 95, 92, 0, 0, 88, 89, 99, 100, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 107, 109, 102,
	103, 104, 0, 96, 97, 98, 101, 0, 0, 0,
	83, 0, 0, 255, 84, 0, 86, 85, 105, 106,
	110, 108, 112, 111, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 90, 91, 93, 94, 95, 92, 0,
	0, 88, 89, 99, 100, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 242, 81, 107, 109, 102, 103, 104, 0, 96,
	97, 98, 101, 0, 0, 0, 83, 0, 0, 0,
	84, 0, 86, 85, 105, 106, 110, 108, 112, 111,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 90,
	91, 93, 94, 95, 92, 0, 0, 88, 89, 99,
	100, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	0, 0, 83, 239, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 107, 109, 102, 103, 104,
	0, 96, 97, 98, 101, 0, 0, 0, 83, 218,
	0, 0, 84, 0, 86, 85, 105, 106, 110, 108,
	112, 111, 0, 0, 0, 0, 82, 0, 0, 0,
	0, 90, 91, 93, 94, 95, 92, 0, 0, 88,
	89, 99, 100, 0, 0, 0, 0, 0, 0, 0,
	87, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 107, 109, 102, 103, 104, 0, 96, 97, 98,
	101, 0, 205, 0, 83, 0, 0, 0, 84, 0,
	86, 85, 105, 106, 110, 108, 112, 111, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 90, 91, 93,
	94, 95, 92, 0, 0, 88, 89, 99, 100, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 81, 107, 109, 102,
	103, 104, 0, 96, 97, 98, 101, 0, 196, 0,
	83, 0, 0, 0, 84, 0, 86, 85, 105, 106,
	110, 108, 112, 111, 0, 0, 0, 0, 82, 0,
	0, 0, 0, 90, 91, 93, 94, 95, 92, 0,
	0, 88, 89, 99, 100, 0, 0, 0, 0, 0,
	0, 0, 87, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 81, 107, 109, 102, 103, 104, 0, 96,
	97, 98, 101, 0, 0, 0, 83, 0, 0, 0,
	84, 0, 86, 85, 105, 106, 110, 108, 112, 111,
	0, 0, 0, 0, 82, 0, 0, 0, 0, 90,
	91, 93, 94, 95, 92, 0, 0, 88, 89, 99,
	100, 0, 0, 0, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	0, 0, 158, 0, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 81, 107, 109, 102, 103, 104,
	0, 96, 97, 98, 101, 0, 0, 0, 83, 0,
	0, 0, 84, 0, 86, 85, 105, 106, 110, 108,
	112, 111, 0, 0, 0, 0, 82, 0, 0, 119,
	51, 52, 0, 0, 31, 0, 47, 0, 0, 88,
	89, 99, 100, 0, 0, 0, 0, 0, 39, 53,
	54, 55, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 107, 109, 102, 103, 104, 0, 96, 97, 98,
	101, 0, 0, 0, 83, 40, 56, 0, 84, 37,
	86, 0, 0, 38, 0, 0, 0, 0, 0, 0,
	50, 0, 58, 60, 0, 0, 59, 0, 114, 0,
	34, 0, 0, 117, 32, 0, 0, 57, 35, 51,
	52, 0, 0, 31, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 53, 54,
	55, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 35, 51, 52, 0, 0, 31,
	0, 0, 0, 0, 40, 56, 0, 0, 37, 0,
	0, 0, 38, 39, 53, 54, 55, 0, 0, 50,
	0, 58, 60, 0, 0, 59, 0, 41, 0, 34,
	35, 51, 52, 32, 329, 31, 57, 0, 0, 0,
	40, 56, 0, 0, 37, 0, 0, 0, 38, 39,
	53, 54, 55, 0, 0, 50, 0, 58, 60, 0,
	0, 59, 0, 41, 0, 34, 0, 0, 0, 32,
	298, 0, 57, 0, 0, 0, 40, 56, 0, 0,
	37, 0, 0, 0, 38, 0, 85, 105, 106, 110,
	108, 50, 111, 58, 60, 0, 0, 59, 0, 41,
	0, 34, 0, 0, 256, 32, 0, 0, 57, 0,
	88, 89, 99, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 107, 109, 102, 103, 104, 0, 96, 97,
	98, 101, 35, 51, 52, 83, 0, 31, 0, 84,
	0, 86, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 39, 53, 54, 55, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	35, 51, 52, 0, 0, 31, 0, 0, 40, 56,
	0, 0, 37, 0, 0, 0, 38, 0, 221, 39,
	53, 54, 55, 50, 0, 58, 60, 0, 0, 59,
	0, 41, 0, 34, 0, 0, 0, 32, 0, 0,
	57, 0, 0, 0, 0, 0, 40, 56, 0, 0,
	37, 0, 0, 0, 38, 0, 0, 0, 0, 0,
	0, 50, 0, 58, 60, 0, 0, 59, 0, 41,
	0, 34, 0, 0, 202, 32, 0, 0, 57, 35,
	51, 52, 0, 0, 31, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 39, 53,
	54, 55, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 35, 51, 52,
	0, 0, 31, 0, 0, 40, 56, 0, 0, 37,
	0, 0, 0, 38, 0, 169, 39, 53, 54, 55,
	50, 0, 58, 60, 0, 0, 59, 0, 41, 0,
	34, 0, 0, 0, 32, 0, 0, 57, 0, 0,
	0, 0, 0, 40, 56, 0, 0, 37, 0, 0,
	0, 38, 0, 0, 0, 0, 0, 0, 50, 0,
	58, 60, 0, 0, 59, 0, 41, 0, 34, 35,
	51, 52, 32, 0, 31, 57, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 39, 53,
	54, 55, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 35, 51, 52, 0, 0,
	31, 0, 0, 0, 0, 40, 56, 0, 0, 37,
	0, 0, 0, 38, 39, 53, 54, 55, 0, 0,
	50, 0, 58, 60, 0, 0, 59, 0, 353, 0,
	34, 35, 51, 52, 32, 0, 31, 57, 0, 0,
	0, 40, 56, 0, 0, 37, 0, 0, 0, 38,
	39, 53, 54, 55, 0, 0, 50, 0, 58, 60,
	0, 0, 59, 0, 309, 0, 34, 35, 51, 52,
	32, 0, 31, 57, 0, 0, 0, 40, 56, 0,
	0, 37, 0, 0, 0, 38, 39, 53, 54, 55,
	0, 0, 50, 0, 58, 60, 0, 0, 59, 0,
	307, 0, 34, 0, 0, 0, 32, 0, 0, 57,
	0, 0, 0, 40, 56, 0, 0, 37, 0, 0,
	0, 38, 85, 105, 106, 110, 108, 0, 50, 0,
	58, 60, 0, 0, 59, 0, 253, 0, 34, 0,
	0, 0, 32, 0, 0, 57, 88, 89, 99, 100,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 107, 109,
	102, 103, 104, 0, 96, 97, 98, 101, 35, 147,
	52, 83, 0, 31, 0, 84, 0, 86, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 39, 53, 54,
	55, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 74, 51, 52, 0, 0, 31,
	0, 0, 0, 0, 40, 56, 0, 0, 37, 0,
	0, 0, 38, 39, 53, 54, 55, 0, 0, 50,
	0, 58, 60, 0, 0, 59, 0, 41, 0, 34,
	0, 0, 0, 32, 0, 0, 57, 0, 0, 0,
	40, 56, 0, 0, 37, 0, 0, 0, 38, 0,
	0, 0, 0, 0, 0, 50, 0, 58, 60, 0,
	0, 59, 0, 41, 0, 34, 0, 0, 0, 32,
	0, 0, 57,
}

var yyPact = [...]int{
	-67, -1000, 1038, -67, -1000, -73, -73, -1000, -1000, -1000,
	-1000, -1000, -1000, 3463, 3463, 301, 197, 3790, 96, 94,
	272, -1000, -1000, 1105, -1000, -1000, 3463, 3045, 3463, -1000,
	-1000, 112, -57, 340, 3463, 50, -40, 92, 78, 75,
	74, -73, -1000, -1000, -1000, -1000, -1000, 299, 12, -1000,
	3754, -1000, -1000, -1000, -1000, -1000, 3463, 3463, 3463, 3463,
	3463, -1000, -1000, -1000, -1000, -1000, 1038, -73, -1000, -9,
	2821, 2821, 194, -67, 72, 2887, 3463, 3463, 175, 3463,
	3463, 3463, 3463, 3463, 3425, 3463, 300, 3463, -1000, -1000,
	3463, 3463, 3463, 3463, 3463, 3463, 3463, 3463, 3463, 3463,
	3463, 3463, 3463, 3463, 3463, 3463, 3463, 3463, 3463, 3463,
	3463, 3463, 3463, 2755, -67, 58, 431, 3346, -13, 50,
	2689, 299, 42, -36, 3463, -73, -28, -1000, 340, 340,
	-17, 340, 193, -38, 2623, 3463, 3308, 3463, 3463, 340,
	316, 3463, 7, -1000, 3463, 3463, -73, -1000, -41, 2953,
	-41, -41, -41, -41, -1000, -67, 172, 3463, 3463, 960,
	2557, 3463, -67, 2821, 2821, 2491, 3019, 140, 894, 3463,
	111, -1000, 2953, 2821, 2821, 2821, 2821, 2821, 2821, 111,
	111, 111, 111, 111, 111, 219, 219, 219, 114, 114,
	114, 114, 114, 114, 3686, 3240, -67, 170, -73, 3463,
	-73, -67, 3643, 2425, 3196, -73, 133, 299, -1000, -53,
	-73, 293, -69, -69, 340, -69, -73, -36, -1000, 82,
	828, 3463, 2359, 2293, -32, -44, 291, -52, 2227, 3463,
	-9, 2821, 3463, 167, 254, 55, 47, -1000, 3463, -1000,
	2161, 164, 3463, 39, -1000, -1000, 3160, 762, 163, -1000,
	2095, 289, 162, -67, 2029, 3607, 3571, 1963, 236, 192,
	38, 44, -73, -39, -73, 3463, -1000, -59, 288, 11,
	-1000, -1000, 3124, 696, -1000, -1000, -1000, -1000, 3463, -8,
	158, -73, 3463, -9, 2821, -40, -1000, 203, 0, -1000,
	-1, -1000, 1897, -67, -1000, 2953, -1000, 630, -1000, -1000,
	3463, -1000, -67, -1000, -1000, 156, -67, -67, 1831, -67,
	1765, 3535, -37, -1000, -1000, 212, 3463, -67, 191, 190,
	-3, -73, -1000, -53, 340, -64, 340, -1000, 564, -1000,
	-1000, 3463, 498, 3463, -1000, 3463, 2821, 185, -67, -1000,
	-1000, -1000, 153, -1000, 3463, 1699, 152, -1000, 147, 139,
	-67, 138, -67, -67, 1633, 134, -1000, -1000, -67, 1567,
	66, 132, -67, -67, 180, 128, -69, 127, -73, -69,
	-1000, 3463, 1501, -1000, 3463, 1435, 1369, -67, 125, -1000,
	1303, -1000, -1000, -1000, -1000, 123, -1000, 122, 120, -67,
	-1000, -1000, -67, -67, -1000, 117, 107, -67, -1000, -1000,
	287, 1237, -1000, 1171, -1000, 3463, 101, 247, -1000, -1000,
	-1000, -1000, 100, -1000, -1000, -1000, -1000, 99, 340, -1000,
	-1000, 2821, 244, 179, -1000, -1000, -69, 176, -67, -67,
	98, 45, -1000, -1000,
}

var yyPgo = [...]int{
	0, 48, 359, 274, 285, 357, 354, 353, 352, 350,
	349, 5, 2, 255, 0, 6, 4, 348, 36, 347,
	346, 7, 335, 333, 328, 326, 323, 321, 319, 316,
	314, 309, 308, 307, 306, 17, 1, 14, 72,
}

var yyR1 = [...]int{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 5,
	6, 6, 6, 6, 7, 7, 7, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 9, 10,
	10, 10, 10, 10, 11, 11, 12, 13, 13, 13,
	13, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 15, 16, 16, 16, 16,
	16, 16, 16, 17, 17, 18, 18, 19, 19, 20,
	21, 22, 22, 22, 22, 22, 22, 23, 23, 23,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	25, 25, 26, 26, 26, 26, 26, 27, 27, 27,
	27, 28, 28, 28, 28, 28, 28, 28, 28, 32,
	32, 32, 32, 32, 32, 31, 31, 31, 30, 30,
	30, 30, 30, 30, 29, 29, 33, 33, 34, 34,
	34, 35, 35, 37, 37, 38, 36, 36, 36, 36,
}

var yyR2 = [...]int{
	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 13, 12, 9, 8, 6, 5, 6, 5,
	4, 6, 4, 1, 1, 1, 1, 1, 1, 4,
	3, 3, 3, 3, 5, 7, 5, 4, 7, 5,
	6, 7, 7, 8, 7, 8, 8, 9, 7, 0,
	1, 1, 2, 2, 4, 4, 3, 0, 1, 4,
	4, 1, 1, 5, 3, 7, 8, 8, 9, 2,
	5, 7, 3, 5, 4, 5, 4, 4, 4, 4,
	4, 4, 4, 6, 8, 7, 3, 5, 1, 1,
	1, 1, 1, 0, 1, 4, 1, 3, 2, 2,
	5, 2, 6, 2, 5, 2, 3, 1, 1, 3,
	1, 2, 1, 1, 1, 1, 1, 0, 3, 6,
	6, 5, 5, 7, 8, 6, 5, 5, 7, 8,
	3, 2, 2, 2, 2, 2, 2, 1, 1, 1,
	1, 2, 2, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 0, 1, 2, 1,
	1, 0, 1, 1, 2, 1, 0, 2, 1, 1,
}

var yyChk = [...]int{
	-1000, -1, -33, -2, -34, 78, -37, -38, 83, -3,
	-4, 38, 39, 10, 12, 28, 29, 47, 55, 56,
	-7, -8, -9, -14, -5, -6, 13, 15, 44, -19,
	-22, 9, 79, -18, 75, 4, -21, 54, 58, 23,
	50, 73, -24, -25, -26, -27, -28, 11, -13, -20,
	65, 5, 6, 24, 25, 26, 51, 82, 67, 71,
	68, -32, -31, -30, -29, -33, -34, -37, -38, -13,
	-14, -14, 4, 73, 4, -14, 75, 75, 14, 59,
	52, 61, 27, 75, 79, 16, 81, 51, 40, 41,
	32, 33, 37, 34, 35, 36, 68, 69, 70, 42,
	43, 71, 64, 65, 66, 17, 18, 62, 20, 63,
	19, 22, 21, -14, 73, -15, -14, 78, -4, 4,
	-14, 75, 4, 80, -35, -37, -16, 4, 68, -18,
	57, 48, 49, 79, -14, 75, 79, 75, 75, 75,
	75, -35, -15, 4, 59, 52, 77, 5, -14, -14,
	-14, -14, -14, -14, -3, 73, -1, 75, 75, -14,
	-14, 13, 73, -14, -14, -14, -14, -13, -14, 60,
	-14, 4, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, 73, -1, -37, 16,
	77, 73, 78, -14, 78, 73, -15, 75, -18, -13,
	73, 81, -16, -16, 79, -16, 73, 80, 76, -13,
	-14, 60, -14, -14, -16, -16, 53, -23, -14, 59,
	-13, -14, -35, -1, 74, -13, -13, 76, 77, 76,
	-14, -1, 60, 8, 76, 80, 60, -14, -1, 74,
	-14, -35, -1, 73, -14, 78, 78, -14, -35, 76,
	8, -15, 77, -36, -37, -35, 4, -16, -35, 8,
	76, 80, 60, -14, 76, 76, 76, 76, 77, 4,
	-36, 77, 60, -13, -14, -21, 74, 30, 8, 76,
	8, 76, -14, 73, 74, -14, 76, -14, 80, 80,
	60, 74, 73, 4, 74, -1, 73, 73, -14, 73,
	-14, 78, -10, -12, -11, 46, 45, 73, 76, 76,
	8, -37, 80, -13, 80, -17, 4, 76, -14, 80,
	80, 60, -14, 77, 74, -35, -14, 4, 73, 76,
	76, 76, -1, 80, 60, -14, -1, 74, -1, -1,
	73, -1, 73, 73, -14, -35, -11, -12, 60, -14,
	-13, -1, 73, 73, 76, -36, -16, -35, 77, -16,
	80, 60, -14, 76, 77, -14, -14, 73, -1, 74,
	-14, 80, 74, 74, 74, -1, 74, -1, -1, 73,
	74, -1, 60, 60, 74, -1, -1, 73, 74, 74,
	-35, -14, 80, -14, 76, 60, -1, 74, 80, 74,
	74, 74, -1, -1, -1, 74, 74, -1, 4, 80,
	76, -14, 74, 31, 74, 74, -16, 31, 73, 73,
	-1, -1, 74, 74,
}

var yyDef = [...]int{
	166, -2, -2, 166, 167, 170, 169, 173, 175, 3,
	6, 7, 8, 57, 0, 0, 0, 0, 0, 0,
	23, 24, 25, -2, 27, 28, 0, -2, 0, 61,
	62, 0, 171, 0, 0, 110, 108, 0, 0, 0,
	0, 171, 88, 89, 90, 91, 92, 93, 0, 107,
	0, 112, 113, 114, 115, 116, 0, 0, 0, 0,
	0, 137, 138, 139, 140, 2, -2, 168, 174, 9,
	58, 10, 0, 166, 110, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 0, 0, 141, 142,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 166, 0, 58, 0, 0, -2,
	0, 93, 0, -2, 57, 172, 0, 96, 0, 0,
	0, 0, 0, 0, 0, 57, 0, 0, 0, 0,
	0, 117, 0, 94, 57, 0, 171, 111, 132, 131,
	133, 134, 135, 136, 4, 166, 0, 57, 57, 0,
	0, 0, 166, 30, 32, 0, 64, 0, 0, 0,
	86, 109, 130, 143, 144, 145, 146, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 166, 0, 169, 0,
	171, 166, 0, 0, 0, 171, 0, 93, 106, 176,
	171, 0, 98, 99, 0, 101, 171, 105, 72, 0,
	0, 0, 0, 0, 0, 0, 0, 176, 0, 57,
	31, 33, 0, 0, 0, 0, 0, 20, 0, 22,
	0, 0, 0, 0, 76, 78, 0, 0, 0, 37,
	0, 0, 0, 166, 0, 0, 0, 0, 49, 0,
	0, 0, -2, 0, 178, 57, 97, 0, 0, 0,
	74, 77, 0, 0, 79, 80, 81, 82, 0, 0,
	0, -2, 0, 29, 59, -2, 11, 0, 0, -2,
	0, -2, 0, 166, 36, 63, 75, 0, 126, 127,
	0, 34, 166, 95, 39, 0, 166, 166, 0, 166,
	0, 0, 171, 50, 51, 0, 57, 166, 0, 0,
	0, -2, 70, 176, 0, 171, 0, 73, 0, 121,
	122, 0, 0, 0, 87, 0, 118, 0, 166, -2,
	-2, 21, 0, 125, 0, 0, 0, 40, 0, 0,
	166, 0, 166, 166, 0, 0, 52, 53, 166, 58,
	0, 0, 166, 166, 0, 0, 100, 0, 171, 103,
	120, 0, 0, 83, 0, 0, 0, 166, 0, 35,
	0, 128, 38, 41, 42, 0, 44, 0, 0, 166,
	48, 56, 166, 166, 65, 0, 0, 166, 71, 102,
	0, 0, 123, 0, 85, 0, 0, 15, 129, 43,
	45, 46, 0, 54, 55, 66, 67, 0, 0, 124,
	84, 119, 14, 0, 47, 68, 104, 0, 166, 166,
	0, 0, 13, 12,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	83, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 82, 3, 3, 3, 70, 71, 3,
	75, 76, 68, 64, 77, 65, 81, 69, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 60, 78,
	62, 59, 63, 61, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 79, 3, 80, 67, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 73, 66, 74,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 72,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:108
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:112
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:118
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:127
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:143
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:147
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:151
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:156
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:161
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:166
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:171
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:176
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:181
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 14:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:186
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:191
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:196
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:201
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:206
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:211
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:216
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:221
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr, Key: yyDollar[5].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:226
		{
			yyVAL.stmt = &ast.CloseStmt{Expr: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:231
		{
			yyVAL.stmt = yyDollar[1].stmt_if
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:235
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:239
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:243
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:250
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:254
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:260
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:267
		{
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{yyDollar[3].expr}}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:272
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[1].exprs, RHS: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
			}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:284
		{
			yyVAL.stmt_lets = &ast.ChanStmt{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:289
		{
			if len(yyDollar[1].exprs) == 2 {
				chanStmt := &ast.ChanStmt{LHS: yyDollar[1].exprs[0].(ast.Expr), OkExpr: yyDollar[1].exprs[1].(ast.Expr), RHS: yyDollar[3].expr}
				yyVAL.stmt_lets = chanStmt
				yyVAL.stmt_lets.SetPosition(chanStmt.LHS.Position())
			} else if len(yyDollar[1].exprs) < 2 {
				yylex.Error("missing expressions on left side of channel operator")
				yyVAL.stmt_lets = &ast.ChanStmt{RHS: yyDollar[3].expr}
				yyVAL.stmt_lets.SetPosition(yyDollar[2].tok.Position())
			}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:303
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:308
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			ifStmt.ElseIf = append(ifStmt.ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:313
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			if ifStmt.Else != nil {
				yylex.Error("multiple else statement")
			}
			ifStmt.Else = yyDollar[4].compstmt
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:323
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:328
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:339
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:344
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:349
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:354
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:359
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:364
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:369
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:374
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:379
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:386
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:395
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:399
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:403
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:407
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:413
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:423
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:428
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:435
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:442
		{
			yyVAL.exprs = nil
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:446
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:450
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:457
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:466
		{
			yyVAL.expr = yyDollar[1].expr_member_or_ident
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:470
		{
			yyVAL.expr = yyDollar[1].expr_literals
		}
	case 63:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:474
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, LHS: yyDollar[3].expr, RHS: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:479
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 65:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:484
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:489
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:494
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 68:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:499
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:504
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:509
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:514
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:519
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:524
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:529
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:534
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:539
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:544
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:549
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:554
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:559
		{
			yyVAL.expr = &ast.ImportExpr{Name: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:564
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:574
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:579
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:584
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:589
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:594
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:599
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:604
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:609
		{
			yyVAL.expr = yyDollar[1].expr_chan
			yyVAL.expr.SetPosition(yyDollar[1].expr_chan.Position())
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:618
		{
			yyVAL.expr_idents = []string{}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:622
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:626
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:635
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:639
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:648
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:657
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 100:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:667
		{
			yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeMap, Key: yyDollar[3].type_data, SubType: yyDollar[5].type_data}
		}
	case 101:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:671
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 102:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:680
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 103:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:686
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 104:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:690
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:700
		{
			yyVAL.slice_count = 1
		}
	case 106:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:704
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:710
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_member
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:714
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_ident
		}
	case 109:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:720
		{
			yyVAL.expr_member = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr_member.SetPosition(yyDollar[1].expr.Position())
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:727
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:734
		{
			num, err := toNumber("-" + yyDollar[2].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: -" + yyDollar[2].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[2].tok.Position())
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:743
		{
			num, err := toNumber(yyDollar[1].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: " + yyDollar[1].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:752
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: stringToValue(yyDollar[1].tok.Lit)}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:757
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: trueValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:762
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: falseValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:767
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: nilValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 117:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:774
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 118:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:778
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:782
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 120:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:792
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 121:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:796
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 122:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:800
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 123:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:804
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 124:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:808
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 125:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:812
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:816
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 127:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:820
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 128:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:824
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 129:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:828
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 130:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:834
		{
			yyVAL.expr_chan = &ast.ChanExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:838
		{
			yyVAL.expr_chan = &ast.ChanExpr{RHS: yyDollar[2].expr}
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:844
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:849
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:854
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:859
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:864
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:871
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:876
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:881
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:886
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:893
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:901
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:909
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:917
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:925
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:933
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:941
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:949
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:960
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:965
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:970
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "%", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:975
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "<<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:980
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: ">>", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:985
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:992
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:997
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1002
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1009
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "==", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1014
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "!=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1019
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1024
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1029
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1034
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1041
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "&&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 165:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1046
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "||", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	}
	goto yystack /* stack new state and value */
}
