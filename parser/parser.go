// Code generated by goyacc -o parser.go parser.go.y. DO NOT EDIT.

//line parser.go.y:2
package parser

import __yyfmt__ "fmt"

//line parser.go.y:2

import (
	"github.com/mattn/anko/ast"
)

//line parser.go.y:45
type yySymType struct {
	yys int
	tok ast.Token

	compstmt            ast.Stmt
	stmts               ast.Stmt
	stmt                ast.Stmt
	stmt_var_or_lets    ast.Stmt
	stmt_var            ast.Stmt
	stmt_lets           ast.Stmt
	stmt_if             ast.Stmt
	stmt_for            ast.Stmt
	stmt_switch         ast.Stmt
	stmt_switch_cases   ast.Stmt
	stmt_switch_case    ast.Stmt
	stmt_switch_default ast.Stmt

	exprs                []ast.Expr
	expr                 ast.Expr
	expr_idents          []string
	type_data            *ast.TypeStruct
	type_data_struct     *ast.TypeStruct
	slice_count          int
	expr_member_or_ident ast.Expr
	expr_member          *ast.MemberExpr
	expr_ident           *ast.IdentExpr
	expr_literals        ast.Expr
	expr_map             *ast.MapExpr
	expr_slice           ast.Expr
	expr_chan            ast.Expr
	expr_unary           ast.Expr
	expr_binary          ast.Expr
	expr_lets            ast.Expr

	op_binary     ast.Operator
	op_comparison ast.Operator
	op_add        ast.Operator
	op_multiply   ast.Operator
}

const IDENT = 57346
const NUMBER = 57347
const STRING = 57348
const ARRAY = 57349
const VARARG = 57350
const FUNC = 57351
const RETURN = 57352
const VAR = 57353
const THROW = 57354
const IF = 57355
const ELSE = 57356
const FOR = 57357
const IN = 57358
const EQEQ = 57359
const NEQ = 57360
const GE = 57361
const LE = 57362
const OROR = 57363
const ANDAND = 57364
const NEW = 57365
const TRUE = 57366
const FALSE = 57367
const NIL = 57368
const NILCOALESCE = 57369
const MODULE = 57370
const TRY = 57371
const CATCH = 57372
const FINALLY = 57373
const PLUSEQ = 57374
const MINUSEQ = 57375
const MULEQ = 57376
const DIVEQ = 57377
const ANDEQ = 57378
const OREQ = 57379
const BREAK = 57380
const CONTINUE = 57381
const PLUSPLUS = 57382
const MINUSMINUS = 57383
const SHIFTLEFT = 57384
const SHIFTRIGHT = 57385
const SWITCH = 57386
const CASE = 57387
const DEFAULT = 57388
const GO = 57389
const CHAN = 57390
const STRUCT = 57391
const MAKE = 57392
const OPCHAN = 57393
const EQOPCHAN = 57394
const TYPE = 57395
const LEN = 57396
const DELETE = 57397
const CLOSE = 57398
const IMPORT = 57399
const UNARY = 57400

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"IDENT",
	"NUMBER",
	"STRING",
	"ARRAY",
	"VARARG",
	"FUNC",
	"RETURN",
	"VAR",
	"THROW",
	"IF",
	"ELSE",
	"FOR",
	"IN",
	"EQEQ",
	"NEQ",
	"GE",
	"LE",
	"OROR",
	"ANDAND",
	"NEW",
	"TRUE",
	"FALSE",
	"NIL",
	"NILCOALESCE",
	"MODULE",
	"TRY",
	"CATCH",
	"FINALLY",
	"PLUSEQ",
	"MINUSEQ",
	"MULEQ",
	"DIVEQ",
	"ANDEQ",
	"OREQ",
	"BREAK",
	"CONTINUE",
	"PLUSPLUS",
	"MINUSMINUS",
	"SHIFTLEFT",
	"SHIFTRIGHT",
	"SWITCH",
	"CASE",
	"DEFAULT",
	"GO",
	"CHAN",
	"STRUCT",
	"MAKE",
	"OPCHAN",
	"EQOPCHAN",
	"TYPE",
	"LEN",
	"DELETE",
	"CLOSE",
	"IMPORT",
	"'='",
	"':'",
	"'?'",
	"'<'",
	"'>'",
	"'+'",
	"'-'",
	"'|'",
	"'^'",
	"'*'",
	"'/'",
	"'%'",
	"'&'",
	"UNARY",
	"'{'",
	"'}'",
	"'('",
	"')'",
	"','",
	"';'",
	"'['",
	"']'",
	"'.'",
	"'!'",
	"'\\n'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line parser.go.y:1073

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	52, 57,
	58, 57,
	76, 57,
	77, 5,
	-2, 1,
	-1, 23,
	76, 58,
	-2, 26,
	-1, 27,
	16, 93,
	-2, 57,
	-1, 66,
	52, 57,
	58, 57,
	76, 57,
	-2, 5,
	-1, 119,
	16, 94,
	76, 94,
	-2, 109,
	-1, 123,
	4, 104,
	48, 104,
	49, 104,
	-2, 69,
	-1, 260,
	73, 178,
	79, 178,
	-2, 170,
	-1, 278,
	73, 178,
	-2, 170,
	-1, 282,
	1, 60,
	8, 60,
	45, 60,
	46, 60,
	52, 60,
	58, 60,
	59, 60,
	73, 60,
	75, 60,
	76, 60,
	77, 60,
	79, 60,
	82, 60,
	-2, 107,
	-1, 286,
	1, 17,
	45, 17,
	46, 17,
	73, 17,
	77, 17,
	82, 17,
	-2, 74,
	-1, 288,
	1, 19,
	45, 19,
	46, 19,
	73, 19,
	77, 19,
	82, 19,
	-2, 76,
	-1, 318,
	73, 176,
	79, 176,
	-2, 171,
	-1, 335,
	1, 16,
	45, 16,
	46, 16,
	73, 16,
	77, 16,
	82, 16,
	-2, 73,
	-1, 336,
	1, 18,
	45, 18,
	46, 18,
	73, 18,
	77, 18,
	82, 18,
	-2, 75,
}

const yyPrivate = 57344

const yyLast = 3799

var yyAct = [...]int{
	70, 261, 310, 23, 126, 7, 311, 36, 115, 5,
	313, 312, 68, 140, 8, 71, 363, 260, 75, 278,
	8, 123, 8, 8, 8, 8, 273, 113, 116, 120,
	210, 210, 274, 275, 209, 133, 33, 210, 48, 319,
	215, 135, 210, 1, 83, 132, 124, 8, 84, 388,
	86, 147, 69, 227, 203, 198, 141, 148, 149, 150,
	151, 152, 145, 329, 360, 85, 145, 23, 336, 335,
	129, 199, 323, 68, 315, 293, 127, 158, 159, 317,
	162, 163, 164, 165, 287, 167, 169, 285, 171, 88,
	89, 172, 173, 174, 175, 176, 177, 178, 179, 180,
	181, 182, 183, 184, 185, 186, 187, 188, 189, 190,
	191, 192, 193, 194, 206, 199, 266, 155, 202, 258,
	130, 131, 166, 83, 241, 224, 127, 84, 134, 86,
	205, 68, 156, 211, 212, 213, 218, 220, 221, 128,
	139, 226, 138, 222, 223, 229, 316, 199, 137, 122,
	132, 288, 145, 428, 286, 145, 136, 77, 196, 230,
	207, 238, 76, 208, 427, 129, 129, 129, 420, 245,
	130, 131, 419, 217, 6, 129, 129, 417, 411, 410,
	67, 333, 228, 267, 145, 406, 257, 199, 144, 128,
	405, 242, 145, 404, 143, 233, 234, 402, 231, 248,
	132, 394, 252, 68, 255, 239, 393, 125, 389, 85,
	385, 381, 145, 249, 379, 259, 125, 378, 256, 121,
	270, 377, 374, 263, 343, 330, 301, 277, 265, 298,
	291, 281, 283, 88, 89, 99, 100, 289, 282, 246,
	247, 292, 232, 424, 250, 294, 160, 423, 392, 334,
	372, 359, 207, 358, 305, 307, 102, 103, 104, 314,
	96, 97, 98, 101, 214, 354, 280, 83, 68, 154,
	324, 84, 73, 86, 230, 9, 328, 313, 312, 422,
	332, 418, 284, 10, 78, 413, 322, 300, 276, 197,
	264, 142, 331, 170, 72, 302, 4, 2, 341, 61,
	66, 65, 320, 62, 63, 161, 64, 46, 45, 350,
	44, 118, 353, 43, 355, 42, 352, 225, 30, 49,
	125, 29, 361, 351, 68, 321, 309, 364, 367, 22,
	370, 21, 371, 20, 338, 362, 25, 24, 3, 0,
	0, 375, 153, 342, 0, 0, 0, 344, 345, 0,
	347, 0, 356, 0, 0, 0, 0, 0, 357, 129,
	0, 85, 105, 106, 110, 108, 0, 396, 0, 0,
	398, 0, 0, 0, 125, 0, 0, 395, 373, 125,
	0, 0, 0, 262, 125, 88, 89, 99, 100, 125,
	380, 0, 382, 383, 0, 0, 0, 0, 386, 0,
	262, 416, 390, 391, 0, 0, 107, 109, 102, 103,
	104, 0, 96, 97, 98, 101, 401, 0, 421, 83,
	0, 0, 0, 84, 0, 86, 197, 0, 407, 0,
	0, 408, 409, 0, 0, 318, 412, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 318, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 425, 426, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 197,
	0, 197, 0, 0, 125, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 262, 125, 0, 0, 0,
	0, 85, 105, 106, 110, 108, 112, 111, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 90, 91, 93,
	94, 95, 92, 0, 197, 88, 89, 99, 100, 0,
	0, 0, 0, 0, 0, 0, 87, 80, 125, 0,
	0, 0, 0, 79, 0, 81, 107, 109, 102, 103,
	104, 0, 96, 97, 98, 101, 0, 200, 0, 83,
	0, 0, 0, 84, 0, 86, 85, 105, 106, 110,
	108, 112, 111, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 90, 91, 93, 94, 95, 92, 0, 0,
	88, 89, 99, 100, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 0,
	81, 107, 109, 102, 103, 104, 0, 96, 97, 98,
	101, 0, 0, 0, 83, 368, 369, 0, 84, 0,
	86, 85, 105, 106, 110, 108, 112, 111, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 90, 91, 93,
	94, 95, 92, 0, 0, 88, 89, 99, 100, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 366, 81, 107, 109, 102, 103,
	104, 0, 96, 97, 98, 101, 0, 0, 0, 83,
	0, 0, 0, 84, 365, 86, 85, 105, 106, 110,
	108, 112, 111, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 90, 91, 93, 94, 95, 92, 0, 0,
	88, 89, 99, 100, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 340,
	81, 107, 109, 102, 103, 104, 0, 96, 97, 98,
	101, 0, 0, 0, 83, 0, 0, 0, 84, 339,
	86, 85, 105, 106, 110, 108, 112, 111, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 90, 91, 93,
	94, 95, 92, 0, 0, 88, 89, 99, 100, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 327, 81, 107, 109, 102, 103,
	104, 0, 96, 97, 98, 101, 0, 0, 0, 83,
	0, 0, 0, 84, 326, 86, 85, 105, 106, 110,
	108, 112, 111, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 90, 91, 93, 94, 95, 92, 0, 0,
	88, 89, 99, 100, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 297,
	81, 107, 109, 102, 103, 104, 0, 96, 97, 98,
	101, 0, 0, 0, 83, 0, 0, 0, 84, 296,
	86, 85, 105, 106, 110, 108, 112, 111, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 90, 91, 93,
	94, 95, 92, 0, 0, 88, 89, 99, 100, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 269, 81, 107, 109, 102, 103,
	104, 0, 96, 97, 98, 101, 0, 0, 0, 83,
	0, 0, 0, 84, 268, 86, 85, 105, 106, 110,
	108, 112, 111, 0, 0, 0, 0, 82, 0, 0,
	0, 0, 90, 91, 93, 94, 95, 92, 0, 0,
	88, 89, 99, 100, 0, 0, 0, 0, 0, 0,
	0, 87, 0, 0, 0, 0, 0, 0, 0, 244,
	81, 107, 109, 102, 103, 104, 0, 96, 97, 98,
	101, 0, 0, 0, 83, 0, 0, 0, 84, 243,
	86, 85, 105, 106, 110, 108, 112, 111, 0, 0,
	0, 0, 82, 0, 0, 0, 0, 90, 91, 93,
	94, 95, 92, 0, 0, 88, 89, 99, 100, 0,
	0, 0, 0, 0, 0, 0, 87, 0, 0, 0,
	0, 0, 0, 0, 0, 81, 107, 109, 102, 103,
	104, 0, 96, 97, 98, 101, 0, 0, 0, 83,
	235, 236, 0, 84, 0, 86, 35, 51, 52, 85,
	0, 31, 13, 47, 14, 26, 0, 27, 0, 0,
	0, 0, 0, 0, 0, 39, 53, 54, 55, 0,
	15, 16, 0, 88, 89, 99, 100, 0, 0, 0,
	11, 12, 0, 0, 0, 0, 28, 0, 0, 17,
	0, 0, 40, 56, 0, 0, 37, 18, 19, 38,
	96, 97, 98, 101, 0, 0, 50, 83, 58, 60,
	0, 84, 59, 86, 41, 0, 34, 0, 0, 0,
	32, 0, 0, 57, 85, 105, 106, 110, 108, 112,
	111, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	90, 91, 93, 94, 95, 92, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	80, 0, 0, 0, 0, 0, 79, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	0, 0, 83, 0, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 107, 109, 102, 103, 104, 0,
	96, 97, 98, 101, 0, 0, 0, 83, 415, 0,
	0, 84, 0, 86, 85, 105, 106, 110, 108, 112,
	111, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	90, 91, 93, 94, 95, 92, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	0, 0, 83, 0, 0, 0, 84, 414, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 107, 109, 102, 103, 104, 0,
	96, 97, 98, 101, 0, 0, 0, 83, 0, 0,
	0, 84, 403, 86, 85, 105, 106, 110, 108, 112,
	111, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	90, 91, 93, 94, 95, 92, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 400, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	0, 0, 83, 0, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 107, 109, 102, 103, 104, 0,
	96, 97, 98, 101, 0, 0, 0, 83, 399, 0,
	0, 84, 0, 86, 85, 105, 106, 110, 108, 112,
	111, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	90, 91, 93, 94, 95, 92, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	0, 0, 83, 0, 0, 0, 84, 397, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 387, 81, 107, 109, 102, 103, 104, 0,
	96, 97, 98, 101, 0, 0, 0, 83, 0, 0,
	0, 84, 0, 86, 85, 105, 106, 110, 108, 112,
	111, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	90, 91, 93, 94, 95, 92, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	384, 0, 83, 0, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 107, 109, 102, 103, 104, 0,
	96, 97, 98, 101, 0, 0, 0, 83, 0, 0,
	0, 84, 376, 86, 85, 105, 106, 110, 108, 112,
	111, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	90, 91, 93, 94, 95, 92, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	348, 0, 83, 0, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 107, 109, 102, 103, 104, 0,
	96, 97, 98, 101, 0, 346, 0, 83, 0, 0,
	0, 84, 0, 86, 85, 105, 106, 110, 108, 112,
	111, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	90, 91, 93, 94, 95, 92, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	0, 0, 83, 337, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 107, 109, 102, 103, 104, 0,
	96, 97, 98, 101, 0, 0, 0, 83, 0, 0,
	308, 84, 0, 86, 85, 105, 106, 110, 108, 112,
	111, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	90, 91, 93, 94, 95, 92, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	303, 0, 83, 0, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 107, 109, 102, 103, 104, 0,
	96, 97, 98, 101, 0, 299, 0, 83, 0, 0,
	0, 84, 0, 86, 85, 105, 106, 110, 108, 112,
	111, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	90, 91, 93, 94, 95, 92, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	290, 0, 83, 0, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 279, 81, 107, 109, 102, 103, 104, 0,
	96, 97, 98, 101, 0, 0, 0, 83, 0, 0,
	0, 84, 0, 86, 85, 105, 106, 110, 108, 112,
	111, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	90, 91, 93, 94, 95, 92, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	0, 0, 83, 272, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 107, 109, 102, 103, 104, 0,
	96, 97, 98, 101, 0, 0, 0, 83, 271, 0,
	0, 84, 0, 86, 85, 105, 106, 110, 108, 112,
	111, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	90, 91, 93, 94, 95, 92, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	0, 0, 83, 0, 0, 253, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 240, 81, 107, 109, 102, 103, 104, 0,
	96, 97, 98, 101, 0, 0, 0, 83, 0, 0,
	0, 84, 0, 86, 85, 105, 106, 110, 108, 112,
	111, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	90, 91, 93, 94, 95, 92, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	0, 0, 83, 237, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 107, 109, 102, 103, 104, 0,
	96, 97, 98, 101, 0, 0, 0, 83, 216, 0,
	0, 84, 0, 86, 85, 105, 106, 110, 108, 112,
	111, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	90, 91, 93, 94, 95, 92, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	204, 0, 83, 0, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 107, 109, 102, 103, 104, 0,
	96, 97, 98, 101, 0, 195, 0, 83, 0, 0,
	0, 84, 0, 86, 85, 105, 106, 110, 108, 112,
	111, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	90, 91, 93, 94, 95, 92, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	0, 0, 83, 0, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 0, 0, 0, 90, 91, 93, 94, 95,
	92, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 0, 0, 0, 87, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 107, 109, 102, 103, 104, 0,
	96, 97, 98, 101, 0, 0, 0, 157, 0, 0,
	0, 84, 0, 86, 85, 105, 106, 110, 108, 112,
	111, 0, 0, 0, 0, 82, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 88, 89,
	99, 100, 0, 0, 0, 0, 0, 0, 0, 87,
	0, 0, 0, 0, 0, 0, 0, 0, 81, 107,
	109, 102, 103, 104, 0, 96, 97, 98, 101, 0,
	0, 0, 83, 0, 0, 0, 84, 0, 86, 85,
	105, 106, 110, 108, 112, 111, 0, 0, 0, 0,
	82, 0, 119, 51, 52, 0, 0, 31, 0, 47,
	0, 0, 0, 88, 89, 99, 100, 0, 0, 0,
	0, 39, 53, 54, 55, 0, 0, 0, 0, 0,
	0, 0, 0, 81, 107, 109, 102, 103, 104, 0,
	96, 97, 98, 101, 0, 0, 0, 83, 40, 56,
	0, 84, 37, 86, 0, 38, 0, 0, 0, 0,
	0, 0, 50, 0, 58, 60, 0, 0, 59, 0,
	114, 0, 34, 0, 0, 117, 32, 0, 0, 57,
	35, 51, 52, 0, 0, 31, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 39,
	53, 54, 55, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 35, 51, 52, 0, 0,
	31, 0, 0, 0, 0, 0, 40, 56, 0, 0,
	37, 0, 0, 38, 39, 53, 54, 55, 0, 0,
	50, 0, 58, 60, 0, 0, 59, 0, 41, 0,
	34, 35, 51, 52, 32, 325, 31, 57, 0, 0,
	0, 40, 56, 0, 0, 37, 0, 0, 38, 0,
	39, 53, 54, 55, 0, 50, 0, 58, 60, 0,
	0, 59, 0, 41, 0, 34, 0, 0, 0, 32,
	295, 0, 57, 0, 0, 0, 0, 40, 56, 0,
	0, 37, 0, 0, 38, 0, 85, 105, 106, 110,
	108, 50, 111, 58, 60, 0, 0, 59, 0, 41,
	0, 34, 0, 0, 254, 32, 0, 0, 57, 0,
	88, 89, 99, 100, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 107, 109, 102, 103, 104, 0, 96, 97, 98,
	101, 35, 51, 52, 83, 0, 31, 0, 84, 0,
	86, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	39, 53, 54, 55, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 35, 51,
	52, 0, 0, 31, 0, 0, 0, 40, 56, 0,
	0, 37, 0, 0, 38, 0, 219, 39, 53, 54,
	55, 50, 0, 58, 60, 0, 0, 59, 0, 41,
	0, 34, 0, 0, 0, 32, 0, 0, 57, 0,
	0, 0, 0, 0, 40, 56, 0, 0, 37, 0,
	0, 38, 0, 0, 0, 0, 0, 0, 50, 0,
	58, 60, 0, 0, 59, 0, 41, 0, 34, 0,
	0, 201, 32, 0, 0, 57, 35, 51, 52, 0,
	0, 31, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 39, 53, 54, 55, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 35, 51, 52, 0, 0, 31, 0,
	0, 0, 40, 56, 0, 0, 37, 0, 0, 38,
	0, 168, 39, 53, 54, 55, 50, 0, 58, 60,
	0, 0, 59, 0, 41, 0, 34, 0, 0, 0,
	32, 0, 0, 57, 0, 0, 0, 0, 0, 40,
	56, 0, 0, 37, 0, 0, 38, 0, 0, 0,
	0, 0, 0, 50, 0, 58, 60, 0, 0, 59,
	0, 41, 0, 34, 35, 51, 52, 32, 0, 31,
	57, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 39, 53, 54, 55, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 35,
	51, 52, 0, 0, 31, 0, 0, 0, 0, 0,
	40, 56, 0, 0, 37, 0, 0, 38, 39, 53,
	54, 55, 0, 0, 50, 0, 58, 60, 0, 0,
	59, 0, 349, 0, 34, 35, 51, 52, 32, 0,
	31, 57, 0, 0, 0, 40, 56, 0, 0, 37,
	0, 0, 38, 0, 39, 53, 54, 55, 0, 50,
	0, 58, 60, 0, 0, 59, 0, 306, 0, 34,
	35, 51, 52, 32, 0, 31, 57, 0, 0, 0,
	0, 40, 56, 0, 0, 37, 0, 0, 38, 39,
	53, 54, 55, 0, 0, 50, 0, 58, 60, 0,
	0, 59, 0, 304, 0, 34, 35, 146, 52, 32,
	0, 31, 57, 0, 0, 0, 40, 56, 0, 0,
	37, 0, 0, 38, 0, 39, 53, 54, 55, 0,
	50, 0, 58, 60, 0, 0, 59, 0, 251, 0,
	34, 74, 51, 52, 32, 0, 31, 57, 0, 0,
	0, 0, 40, 56, 0, 0, 37, 0, 0, 38,
	39, 53, 54, 55, 0, 0, 50, 0, 58, 60,
	0, 0, 59, 0, 41, 0, 34, 0, 0, 0,
	32, 0, 0, 57, 0, 0, 0, 40, 56, 0,
	0, 37, 0, 0, 38, 0, 0, 0, 0, 0,
	0, 50, 0, 58, 60, 0, 0, 59, 0, 41,
	0, 34, 0, 0, 0, 32, 0, 0, 57,
}

var yyPact = [...]int{
	-68, -1000, 1082, -68, -1000, -62, -62, -1000, -1000, -1000,
	-1000, -1000, -1000, 3469, 3469, 290, 200, 3717, 88, 83,
	270, -1000, -1000, 1148, -1000, -1000, 3469, 3058, 3469, -1000,
	-1000, 145, -58, 122, 3469, 54, -37, 82, 74, 68,
	66, -62, -1000, -1000, -1000, -1000, -1000, 287, 136, -1000,
	3682, -1000, -1000, -1000, -1000, -1000, 3469, 3469, 3469, 3469,
	3469, -1000, -1000, -1000, -1000, -1000, 1082, -62, -1000, -14,
	2838, 2838, 197, -68, 58, 2903, 3469, 3469, 233, 3469,
	3469, 3469, 3469, 3469, 3432, 3469, 289, 3469, -1000, -1000,
	3469, 3469, 3469, 3469, 3469, 3469, 3469, 3469, 3469, 3469,
	3469, 3469, 3469, 3469, 3469, 3469, 3469, 3469, 3469, 3469,
	3469, 3469, 3469, 2773, -68, 39, 485, 3354, -23, 54,
	2708, 287, 40, -33, 3469, -62, -38, -1000, 122, 122,
	122, 192, -39, 2643, 3469, 3317, 3469, 3469, 122, 72,
	3469, -5, -1000, 3469, 3469, -62, -1000, -30, 2968, -30,
	-30, -30, -30, -1000, -68, 169, 3469, 3469, 1005, 2578,
	3469, -68, 2838, 2838, 2513, 3033, 116, 940, 3469, 49,
	-1000, 2968, 2838, 2838, 2838, 2838, 2838, 2838, 49, 49,
	49, 49, 49, 49, 1073, 1073, 1073, 193, 193, 193,
	193, 193, 193, 345, 3250, -68, 167, -62, 3469, -62,
	-68, 3646, 2448, 3207, -62, 111, 287, -1000, -59, -62,
	286, -50, -50, -50, -62, -33, -1000, 108, 875, 3469,
	2383, 2318, -49, -43, 284, -57, 2253, 3469, -14, 2838,
	3469, 159, 252, 79, 76, -1000, 3469, -1000, 2188, 157,
	3469, 0, -1000, -1000, 3171, 810, 156, -1000, 2123, 283,
	153, -68, 2058, 3611, 3575, 1993, 232, 187, -1, 71,
	-62, -40, -62, 3469, -1000, 282, -3, -1000, -1000, 3136,
	745, -1000, -1000, -1000, -1000, 3469, -13, 152, -62, 3469,
	-14, 2838, -37, -1000, 177, -6, -1000, -7, -1000, 1928,
	-68, -1000, 2968, -1000, 680, -1000, -1000, 3469, -1000, -68,
	-1000, -1000, 151, -68, -68, 1863, -68, 1798, 3540, -35,
	-1000, -1000, 206, 3469, -68, 181, 179, -11, -62, -1000,
	-59, -60, 122, -1000, 615, -1000, -1000, 3469, 550, 3469,
	-1000, 3469, 2838, 178, -68, -1000, -1000, -1000, 149, -1000,
	3469, 1733, 148, -1000, 144, 141, -68, 138, -68, -68,
	1668, 137, -1000, -1000, -68, 1603, -10, 135, -68, -68,
	176, 133, 128, -62, -50, -1000, 3469, 1538, -1000, 3469,
	1473, 1408, -68, 124, -1000, 1343, -1000, -1000, -1000, -1000,
	120, -1000, 117, 112, -68, -1000, -1000, -68, -68, -1000,
	106, 105, -68, -1000, -1000, 281, 1278, -1000, 1213, -1000,
	3469, 104, 250, -1000, -1000, -1000, -1000, 99, -1000, -1000,
	-1000, -1000, 95, 122, -1000, -1000, 2838, 248, 175, -1000,
	-1000, -50, 171, -68, -68, 91, 80, -1000, -1000,
}

var yyPgo = [...]int{
	0, 43, 338, 275, 283, 337, 336, 333, 331, 329,
	326, 6, 2, 38, 0, 8, 4, 325, 36, 321,
	319, 7, 318, 317, 315, 313, 310, 308, 307, 306,
	304, 303, 299, 297, 296, 13, 1, 174, 5,
}

var yyR1 = [...]int{
	0, 1, 1, 2, 2, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 4, 4, 5,
	6, 6, 6, 6, 7, 7, 7, 8, 8, 8,
	8, 8, 8, 8, 8, 8, 8, 8, 9, 10,
	10, 10, 10, 10, 11, 11, 12, 13, 13, 13,
	13, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
	14, 14, 14, 15, 15, 15, 16, 16, 16, 16,
	16, 16, 17, 17, 18, 18, 19, 19, 20, 21,
	22, 22, 22, 22, 22, 22, 23, 23, 23, 24,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 25,
	25, 26, 26, 26, 26, 26, 27, 27, 27, 27,
	28, 28, 28, 28, 28, 28, 28, 28, 32, 32,
	32, 32, 32, 32, 31, 31, 31, 30, 30, 30,
	30, 30, 30, 29, 29, 33, 33, 34, 34, 34,
	35, 35, 37, 37, 38, 36, 36, 36, 36,
}

var yyR2 = [...]int{
	0, 1, 2, 2, 3, 0, 1, 1, 1, 2,
	2, 5, 13, 12, 9, 8, 6, 5, 6, 5,
	4, 6, 4, 1, 1, 1, 1, 1, 1, 4,
	3, 3, 3, 3, 5, 7, 5, 4, 7, 5,
	6, 7, 7, 8, 7, 8, 8, 9, 7, 0,
	1, 1, 2, 2, 4, 4, 3, 0, 1, 4,
	4, 1, 1, 5, 3, 7, 8, 8, 9, 2,
	5, 7, 3, 5, 4, 5, 4, 4, 4, 4,
	4, 4, 4, 6, 8, 7, 3, 5, 1, 1,
	1, 1, 1, 0, 1, 4, 1, 3, 2, 2,
	2, 6, 2, 5, 2, 3, 1, 1, 3, 1,
	2, 1, 1, 1, 1, 1, 0, 3, 6, 6,
	5, 5, 7, 8, 6, 5, 5, 7, 8, 3,
	2, 2, 2, 2, 2, 2, 1, 1, 1, 1,
	2, 2, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 0, 1, 2, 1, 1,
	0, 1, 1, 2, 1, 0, 2, 1, 1,
}

var yyChk = [...]int{
	-1000, -1, -33, -2, -34, 77, -37, -38, 82, -3,
	-4, 38, 39, 10, 12, 28, 29, 47, 55, 56,
	-7, -8, -9, -14, -5, -6, 13, 15, 44, -19,
	-22, 9, 78, -18, 74, 4, -21, 54, 57, 23,
	50, 72, -24, -25, -26, -27, -28, 11, -13, -20,
	64, 5, 6, 24, 25, 26, 51, 81, 66, 70,
	67, -32, -31, -30, -29, -33, -34, -37, -38, -13,
	-14, -14, 4, 72, 4, -14, 74, 74, 14, 58,
	52, 60, 27, 74, 78, 16, 80, 51, 40, 41,
	32, 33, 37, 34, 35, 36, 67, 68, 69, 42,
	43, 70, 63, 64, 65, 17, 18, 61, 20, 62,
	19, 22, 21, -14, 72, -15, -14, 77, -4, 4,
	-14, 74, 4, 79, -35, -37, -16, 4, 67, -18,
	48, 49, 78, -14, 74, 78, 74, 74, 74, 74,
	-35, -15, 4, 58, 52, 76, 5, -14, -14, -14,
	-14, -14, -14, -3, 72, -1, 74, 74, -14, -14,
	13, 72, -14, -14, -14, -14, -13, -14, 59, -14,
	4, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, -14, -14, -14, -14, -14,
	-14, -14, -14, -14, -14, 72, -1, -37, 16, 76,
	72, 77, -14, 77, 72, -15, 74, -18, -13, 72,
	80, -16, -16, -16, 72, 79, 75, -13, -14, 59,
	-14, -14, -16, -16, 53, -23, -14, 58, -13, -14,
	-35, -1, 73, -13, -13, 75, 76, 75, -14, -1,
	59, 8, 75, 79, 59, -14, -1, 73, -14, -35,
	-1, 72, -14, 77, 77, -14, -35, 75, 8, -15,
	76, -36, -37, -35, 4, -35, 8, 75, 79, 59,
	-14, 75, 75, 75, 75, 76, 4, -36, 76, 59,
	-13, -14, -21, 73, 30, 8, 75, 8, 75, -14,
	72, 73, -14, 75, -14, 79, 79, 59, 73, 72,
	4, 73, -1, 72, 72, -14, 72, -14, 77, -10,
	-12, -11, 46, 45, 72, 75, 75, 8, -37, 79,
	-13, -17, 4, 75, -14, 79, 79, 59, -14, 76,
	73, -35, -14, 4, 72, 75, 75, 75, -1, 79,
	59, -14, -1, 73, -1, -1, 72, -1, 72, 72,
	-14, -35, -11, -12, 59, -14, -13, -1, 72, 72,
	75, -36, -35, 76, -16, 79, 59, -14, 75, 76,
	-14, -14, 72, -1, 73, -14, 79, 73, 73, 73,
	-1, 73, -1, -1, 72, 73, -1, 59, 59, 73,
	-1, -1, 72, 73, 73, -35, -14, 79, -14, 75,
	59, -1, 73, 79, 73, 73, 73, -1, -1, -1,
	73, 73, -1, 4, 79, 75, -14, 73, 31, 73,
	73, -16, 31, 72, 72, -1, -1, 73, 73,
}

var yyDef = [...]int{
	165, -2, -2, 165, 166, 169, 168, 172, 174, 3,
	6, 7, 8, 57, 0, 0, 0, 0, 0, 0,
	23, 24, 25, -2, 27, 28, 0, -2, 0, 61,
	62, 0, 170, 0, 0, 109, 107, 0, 0, 0,
	0, 170, 88, 89, 90, 91, 92, 93, 0, 106,
	0, 111, 112, 113, 114, 115, 0, 0, 0, 0,
	0, 136, 137, 138, 139, 2, -2, 167, 173, 9,
	58, 10, 0, 165, 109, 0, 0, 0, 0, 0,
	0, 0, 0, 57, 0, 0, 0, 0, 140, 141,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 165, 0, 58, 0, 0, -2,
	0, 93, 0, -2, 57, 171, 0, 96, 0, 0,
	0, 0, 0, 0, 57, 0, 0, 0, 0, 0,
	116, 0, 94, 57, 0, 170, 110, 131, 130, 132,
	133, 134, 135, 4, 165, 0, 57, 57, 0, 0,
	0, 165, 30, 32, 0, 64, 0, 0, 0, 86,
	108, 129, 142, 143, 144, 145, 146, 147, 148, 149,
	150, 151, 152, 153, 154, 155, 156, 157, 158, 159,
	160, 161, 162, 163, 164, 165, 0, 168, 0, 170,
	165, 0, 0, 0, 170, 0, 93, 105, 175, 170,
	0, 98, 99, 100, 170, 104, 72, 0, 0, 0,
	0, 0, 0, 0, 0, 175, 0, 57, 31, 33,
	0, 0, 0, 0, 0, 20, 0, 22, 0, 0,
	0, 0, 76, 78, 0, 0, 0, 37, 0, 0,
	0, 165, 0, 0, 0, 0, 49, 0, 0, 0,
	-2, 0, 177, 57, 97, 0, 0, 74, 77, 0,
	0, 79, 80, 81, 82, 0, 0, 0, -2, 0,
	29, 59, -2, 11, 0, 0, -2, 0, -2, 0,
	165, 36, 63, 75, 0, 125, 126, 0, 34, 165,
	95, 39, 0, 165, 165, 0, 165, 0, 0, 170,
	50, 51, 0, 57, 165, 0, 0, 0, -2, 70,
	175, 170, 0, 73, 0, 120, 121, 0, 0, 0,
	87, 0, 117, 0, 165, -2, -2, 21, 0, 124,
	0, 0, 0, 40, 0, 0, 165, 0, 165, 165,
	0, 0, 52, 53, 165, 58, 0, 0, 165, 165,
	0, 0, 0, 170, 102, 119, 0, 0, 83, 0,
	0, 0, 165, 0, 35, 0, 127, 38, 41, 42,
	0, 44, 0, 0, 165, 48, 56, 165, 165, 65,
	0, 0, 165, 71, 101, 0, 0, 122, 0, 85,
	0, 0, 15, 128, 43, 45, 46, 0, 54, 55,
	66, 67, 0, 0, 123, 84, 118, 14, 0, 47,
	68, 103, 0, 165, 165, 0, 0, 13, 12,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	82, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 81, 3, 3, 3, 69, 70, 3,
	74, 75, 67, 63, 76, 64, 80, 68, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 59, 77,
	61, 58, 62, 60, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 78, 3, 79, 66, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 72, 65, 73,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 71,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:108
		{
			yyVAL.compstmt = nil
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:112
		{
			yyVAL.compstmt = yyDollar[1].stmts
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:118
		{
			if yyDollar[2].stmt != nil {
				yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[2].stmt}}
			}
			if l, ok := yylex.(*Lexer); ok {
				l.stmt = yyVAL.stmts
			}
		}
	case 4:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:127
		{
			if yyDollar[3].stmt != nil {
				if yyDollar[1].stmts == nil {
					yyVAL.stmts = &ast.StmtsStmt{Stmts: []ast.Stmt{yyDollar[3].stmt}}
				} else {
					stmts := yyDollar[1].stmts.(*ast.StmtsStmt)
					stmts.Stmts = append(stmts.Stmts, yyDollar[3].stmt)
				}
				if l, ok := yylex.(*Lexer); ok {
					l.stmt = yyVAL.stmts
				}
			}
		}
	case 5:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:143
		{
			yyVAL.stmt = nil
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:147
		{
			yyVAL.stmt = yyDollar[1].stmt_var_or_lets
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:151
		{
			yyVAL.stmt = &ast.BreakStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:156
		{
			yyVAL.stmt = &ast.ContinueStmt{}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:161
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyDollar[2].exprs}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 10:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:166
		{
			yyVAL.stmt = &ast.ThrowStmt{Expr: yyDollar[2].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 11:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:171
		{
			yyVAL.stmt = &ast.ModuleStmt{Name: yyDollar[2].tok.Lit, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 12:
		yyDollar = yyS[yypt-13 : yypt+1]
//line parser.go.y:176
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt, Finally: yyDollar[12].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 13:
		yyDollar = yyS[yypt-12 : yypt+1]
//line parser.go.y:181
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt, Finally: yyDollar[11].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 14:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:186
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Var: yyDollar[6].tok.Lit, Catch: yyDollar[8].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 15:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:191
		{
			yyVAL.stmt = &ast.TryStmt{Try: yyDollar[3].compstmt, Catch: yyDollar[7].compstmt}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 16:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:196
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 17:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:201
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.CallExpr{Name: yyDollar[2].tok.Lit, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].tok.Position())
		}
	case 18:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:206
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, VarArg: true, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[2].expr.Position())
		}
	case 19:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:211
		{
			yyVAL.stmt = &ast.GoroutineStmt{Expr: &ast.AnonCallExpr{Expr: yyDollar[2].expr, SubExprs: yyDollar[4].exprs, Go: true}}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 20:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:216
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 21:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:221
		{
			yyVAL.stmt = &ast.DeleteStmt{Item: yyDollar[3].expr, Key: yyDollar[5].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:226
		{
			yyVAL.stmt = &ast.CloseStmt{Expr: yyDollar[3].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].tok.Position())
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:231
		{
			yyVAL.stmt = yyDollar[1].stmt_if
		}
	case 24:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:235
		{
			yyVAL.stmt = yyDollar[1].stmt_for
		}
	case 25:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:239
		{
			yyVAL.stmt = yyDollar[1].stmt_switch
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:243
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyDollar[1].expr}
			yyVAL.stmt.SetPosition(yyDollar[1].expr.Position())
		}
	case 27:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:250
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_var
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:254
		{
			yyVAL.stmt_var_or_lets = yyDollar[1].stmt_lets
		}
	case 29:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:260
		{
			yyVAL.stmt_var = &ast.VarStmt{Names: yyDollar[2].expr_idents, Exprs: yyDollar[4].exprs}
			yyVAL.stmt_var.SetPosition(yyDollar[1].tok.Position())
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:267
		{
			yyVAL.stmt_lets = &ast.LetsStmt{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{yyDollar[3].expr}}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 31:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:272
		{
			if len(yyDollar[1].exprs) == 2 && len(yyDollar[3].exprs) == 1 {
				if _, ok := yyDollar[3].exprs[0].(*ast.ItemExpr); ok {
					yyVAL.stmt_lets = &ast.LetMapItemStmt{LHSS: yyDollar[1].exprs, RHS: yyDollar[3].exprs[0]}
				} else {
					yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
				}
			} else {
				yyVAL.stmt_lets = &ast.LetsStmt{LHSS: yyDollar[1].exprs, RHSS: yyDollar[3].exprs}
			}
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:284
		{
			yyVAL.stmt_lets = &ast.ChanStmt{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.stmt_lets.SetPosition(yyDollar[1].expr.Position())
		}
	case 33:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:289
		{
			if len(yyDollar[1].exprs) == 2 {
				chanStmt := &ast.ChanStmt{LHS: yyDollar[1].exprs[0].(ast.Expr), OkExpr: yyDollar[1].exprs[1].(ast.Expr), RHS: yyDollar[3].expr}
				yyVAL.stmt_lets = chanStmt
				yyVAL.stmt_lets.SetPosition(chanStmt.LHS.Position())
			} else if len(yyDollar[1].exprs) < 2 {
				yylex.Error("missing expressions on left side of channel operator")
				yyVAL.stmt_lets = &ast.ChanStmt{RHS: yyDollar[3].expr}
				yyVAL.stmt_lets.SetPosition(yyDollar[2].tok.Position())
			}
		}
	case 34:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:303
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyDollar[2].expr, Then: yyDollar[4].compstmt, Else: nil}
			yyVAL.stmt_if.SetPosition(yyDollar[1].tok.Position())
		}
	case 35:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:308
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			ifStmt.ElseIf = append(ifStmt.ElseIf, &ast.IfStmt{If: yyDollar[4].expr, Then: yyDollar[6].compstmt})
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:313
		{
			ifStmt := yyDollar[1].stmt_if.(*ast.IfStmt)
			if ifStmt.Else != nil {
				yylex.Error("multiple else statement")
			}
			ifStmt.Else = yyDollar[4].compstmt
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:323
		{
			yyVAL.stmt_for = &ast.LoopStmt{Stmt: yyDollar[3].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 38:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:328
		{
			if len(yyDollar[2].expr_idents) < 1 {
				yylex.Error("missing identifier")
			} else if len(yyDollar[2].expr_idents) > 2 {
				yylex.Error("too many identifiers")
			} else {
				yyVAL.stmt_for = &ast.ForStmt{Vars: yyDollar[2].expr_idents, Value: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
				yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
			}
		}
	case 39:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:339
		{
			yyVAL.stmt_for = &ast.LoopStmt{Expr: yyDollar[2].expr, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 40:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:344
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt: yyDollar[5].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 41:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:349
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr3: yyDollar[4].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 42:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:354
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 43:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:359
		{
			yyVAL.stmt_for = &ast.CForStmt{Expr2: yyDollar[3].expr, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 44:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:364
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Stmt: yyDollar[6].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 45:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:369
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr3: yyDollar[5].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 46:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:374
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Stmt: yyDollar[7].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 47:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:379
		{
			yyVAL.stmt_for = &ast.CForStmt{Stmt1: yyDollar[2].stmt_var_or_lets, Expr2: yyDollar[4].expr, Expr3: yyDollar[6].expr, Stmt: yyDollar[8].compstmt}
			yyVAL.stmt_for.SetPosition(yyDollar[1].tok.Position())
		}
	case 48:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:386
		{
			switchStmt := yyDollar[5].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Expr = yyDollar[2].expr
			yyVAL.stmt_switch = switchStmt
			yyVAL.stmt_switch.SetPosition(yyDollar[1].tok.Position())
		}
	case 49:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:395
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:399
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Default: yyDollar[1].stmt_switch_default}
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:403
		{
			yyVAL.stmt_switch_cases = &ast.SwitchStmt{Cases: []ast.Stmt{yyDollar[1].stmt_switch_case}}
		}
	case 52:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:407
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			switchStmt.Cases = append(switchStmt.Cases, yyDollar[2].stmt_switch_case)
			yyVAL.stmt_switch_cases = switchStmt
		}
	case 53:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:413
		{
			switchStmt := yyDollar[1].stmt_switch_cases.(*ast.SwitchStmt)
			if switchStmt.Default != nil {
				yylex.Error("multiple default statement")
			}
			switchStmt.Default = yyDollar[2].stmt_switch_default
		}
	case 54:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:423
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: []ast.Expr{yyDollar[2].expr}, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 55:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:428
		{
			yyVAL.stmt_switch_case = &ast.SwitchCaseStmt{Exprs: yyDollar[2].exprs, Stmt: yyDollar[4].compstmt}
			yyVAL.stmt_switch_case.SetPosition(yyDollar[1].tok.Position())
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:435
		{
			yyVAL.stmt_switch_default = yyDollar[3].compstmt
		}
	case 57:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:442
		{
			yyVAL.exprs = nil
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:446
		{
			yyVAL.exprs = []ast.Expr{yyDollar[1].expr}
		}
	case 59:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:450
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr)
		}
	case 60:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:457
		{
			if len(yyDollar[1].exprs) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[4].expr_ident)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:466
		{
			yyVAL.expr = yyDollar[1].expr_member_or_ident
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:470
		{
			yyVAL.expr = yyDollar[1].expr_literals
		}
	case 63:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:474
		{
			yyVAL.expr = &ast.TernaryOpExpr{Expr: yyDollar[1].expr, LHS: yyDollar[3].expr, RHS: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:479
		{
			yyVAL.expr = &ast.NilCoalescingOpExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 65:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:484
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[6].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 66:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:489
		{
			yyVAL.expr = &ast.FuncExpr{Params: yyDollar[3].expr_idents, Stmt: yyDollar[7].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 67:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:494
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[7].compstmt}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 68:
		yyDollar = yyS[yypt-9 : yypt+1]
//line parser.go.y:499
		{
			yyVAL.expr = &ast.FuncExpr{Name: yyDollar[2].tok.Lit, Params: yyDollar[4].expr_idents, Stmt: yyDollar[8].compstmt, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 69:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:504
		{
			yyVAL.expr = &ast.ArrayExpr{}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 70:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:509
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[3].exprs}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 71:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:514
		{
			yyVAL.expr = &ast.ArrayExpr{Exprs: yyDollar[5].exprs, TypeData: &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:519
		{
			yyVAL.expr = &ast.ParenExpr{SubExpr: yyDollar[2].expr}
			if l, ok := yylex.(*Lexer); ok {
				yyVAL.expr.SetPosition(l.pos)
			}
		}
	case 73:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:524
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 74:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:529
		{
			yyVAL.expr = &ast.CallExpr{Name: yyDollar[1].tok.Lit, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 75:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:534
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs, VarArg: true}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:539
		{
			yyVAL.expr = &ast.AnonCallExpr{Expr: yyDollar[1].expr, SubExprs: yyDollar[3].exprs}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:544
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr_ident, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr_ident.Position())
		}
	case 78:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:549
		{
			yyVAL.expr = &ast.ItemExpr{Item: yyDollar[1].expr, Index: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:554
		{
			yyVAL.expr = &ast.LenExpr{Expr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:559
		{
			yyVAL.expr = &ast.ImportExpr{Name: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:564
		{
			if yyDollar[3].type_data.Kind == ast.TypeDefault {
				yyDollar[3].type_data.Kind = ast.TypePtr
				yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			} else {
				yyVAL.expr = &ast.MakeExpr{TypeData: &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[3].type_data}}
			}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 82:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:574
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 83:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:579
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 84:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:584
		{
			yyVAL.expr = &ast.MakeExpr{TypeData: yyDollar[3].type_data, LenExpr: yyDollar[5].expr, CapExpr: yyDollar[7].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 85:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:589
		{
			yyVAL.expr = &ast.MakeTypeExpr{Name: yyDollar[4].tok.Lit, Type: yyDollar[6].expr}
			yyVAL.expr.SetPosition(yyDollar[1].tok.Position())
		}
	case 86:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:594
		{
			yyVAL.expr = &ast.IncludeExpr{ItemExpr: yyDollar[1].expr, ListExpr: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 87:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:599
		{
			yyVAL.expr = yyDollar[3].expr_map
			yyVAL.expr.SetPosition(yyDollar[3].expr_map.Position())
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:604
		{
			yyVAL.expr = yyDollar[1].expr_slice
			yyVAL.expr.SetPosition(yyDollar[1].expr_slice.Position())
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:609
		{
			yyVAL.expr = yyDollar[1].expr_chan
			yyVAL.expr.SetPosition(yyDollar[1].expr_chan.Position())
		}
	case 93:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:618
		{
			yyVAL.expr_idents = []string{}
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:622
		{
			yyVAL.expr_idents = []string{yyDollar[1].tok.Lit}
		}
	case 95:
		yyDollar = yyS[yypt-4 : yypt+1]
//line parser.go.y:626
		{
			if len(yyDollar[1].expr_idents) == 0 {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_idents = append(yyDollar[1].expr_idents, yyDollar[4].tok.Lit)
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:635
		{
			yyVAL.type_data = &ast.TypeStruct{Name: yyDollar[1].tok.Lit}
		}
	case 97:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:639
		{
			if yyDollar[1].type_data.Kind != ast.TypeDefault {
				yylex.Error("not type default")
			} else {
				yyDollar[1].type_data.Env = append(yyDollar[1].type_data.Env, yyDollar[1].type_data.Name)
				yyDollar[1].type_data.Name = yyDollar[3].tok.Lit
			}
		}
	case 98:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:648
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypePtr
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypePtr, SubType: yyDollar[2].type_data}
			}
		}
	case 99:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:657
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeSlice
				yyDollar[2].type_data.Dimensions = yyDollar[1].slice_count
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeSlice, SubType: yyDollar[2].type_data, Dimensions: yyDollar[1].slice_count}
			}
		}
	case 100:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:667
		{
			if yyDollar[2].type_data.Kind == ast.TypeDefault {
				yyDollar[2].type_data.Kind = ast.TypeChan
				yyVAL.type_data = yyDollar[2].type_data
			} else {
				yyVAL.type_data = &ast.TypeStruct{Kind: ast.TypeChan, SubType: yyDollar[2].type_data}
			}
		}
	case 101:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:676
		{
			yyVAL.type_data = yyDollar[4].type_data_struct
		}
	case 102:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:682
		{
			yyVAL.type_data_struct = &ast.TypeStruct{Kind: ast.TypeStructType, StructNames: []string{yyDollar[1].tok.Lit}, StructTypes: []*ast.TypeStruct{yyDollar[2].type_data}}
		}
	case 103:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:686
		{
			if yyDollar[1].type_data_struct == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.type_data_struct.StructNames = append(yyVAL.type_data_struct.StructNames, yyDollar[4].tok.Lit)
			yyVAL.type_data_struct.StructTypes = append(yyVAL.type_data_struct.StructTypes, yyDollar[5].type_data)
		}
	case 104:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:696
		{
			yyVAL.slice_count = 1
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:700
		{
			yyVAL.slice_count = yyDollar[3].slice_count + 1
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:706
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_member
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:710
		{
			yyVAL.expr_member_or_ident = yyDollar[1].expr_ident
		}
	case 108:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:716
		{
			yyVAL.expr_member = &ast.MemberExpr{Expr: yyDollar[1].expr, Name: yyDollar[3].tok.Lit}
			yyVAL.expr_member.SetPosition(yyDollar[1].expr.Position())
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:723
		{
			yyVAL.expr_ident = &ast.IdentExpr{Lit: yyDollar[1].tok.Lit}
			yyVAL.expr_ident.SetPosition(yyDollar[1].tok.Position())
		}
	case 110:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:730
		{
			num, err := toNumber("-" + yyDollar[2].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: -" + yyDollar[2].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[2].tok.Position())
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:739
		{
			num, err := toNumber(yyDollar[1].tok.Lit)
			if err != nil {
				yylex.Error("invalid number: " + yyDollar[1].tok.Lit)
			}
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: num}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:748
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: stringToValue(yyDollar[1].tok.Lit)}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:753
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: trueValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:758
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: falseValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:763
		{
			yyVAL.expr_literals = &ast.LiteralExpr{Literal: nilValue}
			yyVAL.expr_literals.SetPosition(yyDollar[1].tok.Position())
		}
	case 116:
		yyDollar = yyS[yypt-0 : yypt+1]
//line parser.go.y:770
		{
			yyVAL.expr_map = &ast.MapExpr{}
		}
	case 117:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:774
		{
			yyVAL.expr_map = &ast.MapExpr{Keys: []ast.Expr{yyDollar[1].expr}, Values: []ast.Expr{yyDollar[3].expr}}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:778
		{
			if yyDollar[1].expr_map.Keys == nil {
				yylex.Error("syntax error: unexpected ','")
			}
			yyVAL.expr_map.Keys = append(yyVAL.expr_map.Keys, yyDollar[4].expr)
			yyVAL.expr_map.Values = append(yyVAL.expr_map.Values, yyDollar[6].expr)
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:788
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 120:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:792
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: nil}
		}
	case 121:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:796
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: nil, End: yyDollar[4].expr}
		}
	case 122:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:800
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 123:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:804
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr_ident, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 124:
		yyDollar = yyS[yypt-6 : yypt+1]
//line parser.go.y:808
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr}
		}
	case 125:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:812
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: nil}
		}
	case 126:
		yyDollar = yyS[yypt-5 : yypt+1]
//line parser.go.y:816
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: nil, End: yyDollar[4].expr}
		}
	case 127:
		yyDollar = yyS[yypt-7 : yypt+1]
//line parser.go.y:820
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, End: yyDollar[4].expr, Cap: yyDollar[6].expr}
		}
	case 128:
		yyDollar = yyS[yypt-8 : yypt+1]
//line parser.go.y:824
		{
			yyVAL.expr_slice = &ast.SliceExpr{Item: yyDollar[1].expr, Begin: yyDollar[3].expr, End: yyDollar[5].expr, Cap: yyDollar[7].expr}
		}
	case 129:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:830
		{
			yyVAL.expr_chan = &ast.ChanExpr{LHS: yyDollar[1].expr, RHS: yyDollar[3].expr}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:834
		{
			yyVAL.expr_chan = &ast.ChanExpr{RHS: yyDollar[2].expr}
		}
	case 131:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:840
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:845
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 133:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:850
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "^", Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 134:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:855
		{
			yyVAL.expr = &ast.AddrExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:860
		{
			yyVAL.expr = &ast.DerefExpr{Expr: yyDollar[2].expr}
			yyVAL.expr.SetPosition(yyDollar[2].expr.Position())
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:867
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:872
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:877
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line parser.go.y:882
		{
			yyVAL.expr = &ast.OpExpr{Op: yyDollar[1].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:889
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 141:
		yyDollar = yyS[yypt-2 : yypt+1]
//line parser.go.y:897
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: oneLiteral}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 142:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:905
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:913
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 144:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:921
		{
			rhs := &ast.OpExpr{Op: &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:929
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 146:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:937
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 147:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:945
		{
			rhs := &ast.OpExpr{Op: &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}}
			rhs.Op.SetPosition(yyDollar[1].expr.Position())
			rhs.SetPosition(yyDollar[1].expr.Position())
			yyVAL.expr = &ast.LetsExpr{LHSS: []ast.Expr{yyDollar[1].expr}, RHSS: []ast.Expr{rhs}}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 148:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:956
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "*", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:961
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "/", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 150:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:966
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "%", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:971
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "<<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 152:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:976
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: ">>", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:981
		{
			yyVAL.expr = &ast.MultiplyOperator{LHS: yyDollar[1].expr, Operator: "&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 154:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:988
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "+", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 155:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:993
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "-", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 156:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:998
		{
			yyVAL.expr = &ast.AddOperator{LHS: yyDollar[1].expr, Operator: "|", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1005
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "==", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 158:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1010
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "!=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 159:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1015
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 160:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1020
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: "<=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 161:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1025
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 162:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1030
		{
			yyVAL.expr = &ast.ComparisonOperator{LHS: yyDollar[1].expr, Operator: ">=", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 163:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1037
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "&&", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line parser.go.y:1042
		{
			yyVAL.expr = &ast.BinaryOperator{LHS: yyDollar[1].expr, Operator: "||", RHS: yyDollar[3].expr}
			yyVAL.expr.SetPosition(yyDollar[1].expr.Position())
		}
	}
	goto yystack /* stack new state and value */
}
